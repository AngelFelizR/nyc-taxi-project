---
title: "Exploratory Data Analysis"
format: 
  gfm:
    toc: true

execute:
  message: false
  warning: false
---

## Setting the environment up

1. Loading main packages

```{r}
library(here)
library(tidymodels)
library(data.table)
library(lubridate)
library(ggplot2)
library(scales)
library(forcats)

source(here("R/02-custom-functions.R"))
source(here("R/03-custom-values.R"))
theme_set(custom_theme)
```

2. Importing zone codes

```{r}
ZoneCodes <- fread(
  here("data/taxi_zone_lookup.csv"),
  select = ZoneCodesColTypes
)
```

3. Importing and decoding training data.

```{r}
DecodedTrips <- fst::read_fst(
  path = here("data/TripDataTrain.fst"),
  as.data.table = TRUE
) |>
  decode_zones(ZoneCodes) |>
  decode_business()

gc()

setnames(DecodedTrips, "bcf","back_car_fund")
```

## Exploring variable distribution

The purpose of this section is to:

- Understand the meaning of each variable and compare results with current domain knowledge
- Find hidden missing values
- Find usual values

### Categorical variables distribution

- `company`: The majority number of trips are done by *Uber* (HV003) and the rest for *Lyft*.

```{r}
plot_chr_count(DecodedTrips, "company")
```

- `dispatching_base_num`: This column doesn't show much information, so we will **erase** this column as it doesn't show any useful information.

```{r}
plot_chr_count(DecodedTrips, "dispatching_base_num")
```

- `originating_base_num`: This column doesn't show much information, so we will **erase** this column as it doesn't show any useful information.

```{r}
plot_chr_count(DecodedTrips, "originating_base_num")
```

- `shared_request_flag`: Most of passengers don't agree to a shared/pooled ride.

```{r}
plot_chr_count(DecodedTrips, "shared_request_flag")
```

- `shared_match_flag`: Shows that actually fewer trips were shared.

```{r}
plot_chr_count(DecodedTrips, "shared_match_flag")
```

- `access_a_ride_flag`: *Uber* isn't reporting whether their trips were administered on behalf of the Metropolitan 
Transportation Authority and for *Lyft* the answer is always "N", so we will **erase** this column as it doesn't show any useful information.

```{r}
plot_chr_count(DecodedTrips, "access_a_ride_flag")

DecodedTrips[, .N,
              by = c("company",
                     "access_a_ride_flag")]
```

- `wav_request_flag`: It's really unusual for a passager to request a wheelchair-accessible vehicle.

```{r}
plot_chr_count(DecodedTrips, "wav_request_flag")

DecodedTrips[, .N, "wav_request_flag"]
```

- `wav_match_flag`: 7% of trips took place in wheelchair-accessible vehicle which implies that there is more offers than demand.

```{r}
plot_chr_count(DecodedTrips, "wav_match_flag")
```

- For `start_Borough` and `end_Borough` it's weird to start or end the trips in Stalen Island or the EWR Airport.

```{r}
plot_chr_count(DecodedTrips, 
               count_var = c("start_Borough",
                             "end_Borough"),
               breaks_width = 2e6)
```

- For `start_service_zone` and `end_service_zone` It's weird to start or end the trips in any Airports. For consistency we will **relabel EWR as Airports**.

```{r}
plot_chr_count(DecodedTrips, 
               count_var = c("start_service_zone",
                             "end_service_zone"),
               breaks_width = 2e6)
```

At this point is important to explain that in NYC cabs operate different depending on its color:

- **Yellow cabs**: They have no restrictions when it comes to travel.

- **Green cabs**: They can only pick up passengers in Harlem (south of West 110th St and East 96th St), Queens, the Bronx and Brooklyn â€” excluding the airports but **can drop passengers off anywhere** in New York City.

> **Uber** and **Lyft** doesn't any restriction at traveling.

![Zone map from NYC Taxi & Limousine Commission (TLC)](assets/01-Green-Yellow-Zones.png)


- `start_Zone` and `end_Zone` represent a diverse number of places as theirs higher proportion of trips is lower then 3% with the exception of the "N/A" value that needs to be **erased and inputed**.

```{r}
plot_chr_count(DecodedTrips, 
               count_var = c("start_Zone",
                             "end_Zone"),
               breaks_width = 3e6,
               wrap_scales = "free_y")
```


### Numerical variables distribution

Before checking any distribution chart let's the summary statistics of numeric vars.

```{r}
NumericSummary <-
  DecodedTrips[, .SD, .SDcols = is.numeric] |>
  skimr::skim()
  
NumericSummary
```

After checking that statistics we can say that:

1. Numeric values has very different dimensions. So we will need to scale them before applying any method based on distances like PCA.

2. Variables have **very high variability** as of theirs coefficient of variation are higher 0.50, specially for `airport_fee`, `tolls` and `tips`.

```{r}
as.data.table(NumericSummary)[, .(variable = skim_variable,
                   CV = numeric.sd/numeric.mean)
  ][, variable := fct_reorder(variable, CV)] |>
  ggplot(aes(CV, variable))+
  geom_col(fill = "forestgreen", alpha = 0.75)+
  labs(title = "Coefficient of variation summary")+
  theme(plot.title = element_text(face = "bold"))
```

```{r}
set.seed(2525)
ggplot(DecodedTrips[sample.int(nrow(DecodedTrips), 5e4)], aes("1",base_passenger_fare)) +
  geom_boxplot()
set.seed(NULL)
```


3. `base_passenger_fare` and `driver_pay` present some problems as some values a really low and event 0. Checking in internet we found that not Uber's cars present base fare, what the don't see any reason for the negative values, so it's important to if this is a data collection problem or an operational problem

![](assets/02-uber-base-fare.png)

### Datetime variables distribution

As we can see below of the date time data is complete excepting the `on_scene_datetime` which by definition measures the time when driver arrived at the pick-up location for accessible vehicles. 70% of NYC aren't accessible vehicles so there is some thing wrong with that description, so will be remove that column as the `pickup_datetime` also measures the same time without missing values.

```{r}
DatetimeSummary <-
  DecodedTrips[, .SD, .SDcols = is.POSIXct] |>
  skimr::skim()

DatetimeSummary
```

```{r}
# ggplot cannot support plotting 10 million points
set.seed(5184)
ggplot(DecodedTrips[!is.na(on_scene_datetime), 
                    .SD[sample.int(.N, 1e3)]],
       aes(on_scene_datetime, pickup_datetime))+
  geom_point(alpha = 0.08)
set.seed(NULL)
```


## References

- Taxi color: https://newyorksimply.com/green-taxis-nyc-cab/

- Uber base fare:
http://taxihowmuch.com/location/new-york-ny-us

- Number of accesible vehicles: https://www.rollxvans.com/handicap-accesible-taxis-nyc/#:~:text=Currently%20there%20are%20upwards%20of%2013%2C000%20taxis%20in,231%20of%20them%20are%20wheelchair%20accessible%20vehicle%20s.
