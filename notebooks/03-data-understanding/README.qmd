---
title: "Exploratory Data Analysis (EDA) of 2022 High Volume For-Hire Vehicles"
format: 
  gfm:
    toc: true

execute:
  message: false
  warning: false
---

After completing the [business understanding](https://github.com/AngelFelizR/nyc-taxi-project/tree/master/notebooks/02-business-understanding) step, we have a clear objective in mind and an initial description for each column the [raw data](https://github.com/AngelFelizR/nyc-taxi-project/tree/master/data), we are ready to perform the *data understanding* by performing an EDA with the following steps:

1. Examining the distribution of each individual variable by counting the categorical variables and creating histograms or box plots for numerical variables
2. Defining the target variable and confirming its distribution
3. Confirming domain knowledge relations by creating visualization with 2 or more variables
4. Taking a subset of the data to fit in RAM
5. Exploring correlations between predictors by using a correlation matrix or running a PCA
6. Removing high correlated predictors
7. Exploring correlations between the target and predictors creating a correlation funnel and some scatter plots.

After completing this process, we will have the following outcomes:

- Confirming the meaning of each variable
- Ensuring data quality by finding missing values and 
- Identifying the best models to train
- Creating new features that can enhance the predictive power of the machine learning model


## Setting the environment up

To setting the `R` environment up we just need to apply the following 4 steps:

1. Loading the packages to use.

```{r}
library(here)
library(data.table)
library(ggplot2)
library(scales)
library(forcats)
library(dplyr)
library(arrow)
```

2. Sourcing the following custom functions to avoid repeating myself:
  - `count_pct`: It counts the number rows where each unique value repeated in the columns selected arranging there results in descent order and adds a percentage column after collecting the results from `arrow`.
  - `join_zones`: 

```{r}
source(here("R/01-custom-functions.R"))
```

3. Creating an Arrow connection object to perform some manipulations in disk before taking the data into the RAM memory.

```{r}
NycTrips2022 <- 
  here("data/trip-data/year=2022") |>
  open_dataset() |>
  mutate(company = case_when(
    hvfhs_license_num == "HV0002" ~ "Juno",
    hvfhs_license_num == "HV0003" ~ "Uber",
    hvfhs_license_num == "HV0004" ~ "Via",
    hvfhs_license_num == "HV0005" ~ "Lyft"
  )) |>
  select(-hvfhs_license_num)
```

4. Importing the zone code description.

```{r}
ZoneCodes <- fread(
  here("data/taxi_zone_lookup.csv"),
  colClasses = c("integer", "character", "character", "character")
)
```

5. Counting the number of trips for each code, collecting and translating the zone codes.

```{r}
TripsZoneDistribution <-
  NycTrips2022 |>
  count(PULocationID, DOLocationID) |>
  collect() |>
  join_zones(zone_tb = ZoneCodes)
```


## Exploring distribution of each individual variable

### Categorical variables

- `company`: The majority number of trips are done by *Uber* (HV003) and the rest for *Lyft*.

```{r}
NycTrips2022 |> count_pct(company)
```

- `dispatching_base_num`: For most of the trips the dispatching number is **B03404** for Uber and **B03406** related for Lyft. Uber also has other 27 dispatching number, but they are really weird to see.

```{r}
NycTrips2022 |>
  count_pct(company, dispatching_base_num) |>
  as.data.table() |>
  (\(dt) dt[, .(n_unique_code = n_distinct(dispatching_base_num),
                n_missing = sum(is.na(dispatching_base_num)),
                n = sum(n),
                pct = sum(pct) |> round(4L)),
            by = .(company,
                   common = pct > 0.01)
          ][order(-n)] )()
```

- `originating_base_num`: This column has the same information as `dispatching_base_num` or has missing values, so we don't need to use it.

```{r}
NycTrips2022 |>
  count_pct(company,
            same_id = originating_base_num == dispatching_base_num)
```

- `shared_request_flag`: Most of passengers don't agree to a shared/pooled ride.

```{r}
NycTrips2022 |> count_pct(shared_request_flag)
```

- `shared_match_flag`: From the subset of trips that agreed to share the ride only 24% achieved the match, we even can see some weird cases when the passenger did not initially agree to a shared/pooled ride (shared_request_flag = N), but ended up sharing the vehicle with another passenger who booked separately at some point during the trip (shared_match_flag = Y).

```{r}
NycTrips2022 |> 
  count(shared_request_flag, shared_match_flag) |>
  collect() |>
  group_by(shared_request_flag) |>
  mutate(pct = n / sum(n)) |>
  arrange(desc(shared_request_flag), desc(shared_match_flag))
```

- `access_a_ride_flag`: *Uber* isn't reporting whether their trips were administered on behalf of the Metropolitan Transportation Authority and for *Lyft* the answer is always "N", so we will **erase** this column as it doesn't show any useful information.

```{r}
NycTrips2022 |> count_pct(company, access_a_ride_flag)
```

- `wav_request_flag`: It's really unusual for a passenger to request a wheelchair-accessible vehicle.

```{r}
NycTrips2022 |> count_pct(wav_request_flag)
```

- `wav_match_flag`: If someone ask for a wheelchair-accessible vehicle it's really often that passenger get that type of vehicle.

```{r}
NycTrips2022 |> 
  count(wav_request_flag, wav_match_flag) |>
  collect() |>
  group_by(wav_request_flag) |>
  mutate(pct = n / sum(n)) |>
  arrange(desc(wav_request_flag), desc(wav_match_flag))
```

- `start_borough` and `end_borough`: After exploring the next distribution of trips we can highlight that:

  - 94% of the trips take place in *Manhattan*, *Brooklyn*, *Queens* and *Bronx*. As consequence, there is no reason to keep exploring trips related to *Staten Island*, *EWR* or *Unknown* as they are the minority.
  - 70% the trips take place without going to outside the start borough.

```{r}
TripsZoneDistribution[, .(n = sum(n)),
                      by = c("start_borough", "end_borough")
][order(n)
][, c("start_borough", "end_borough") := 
    lapply(.SD, \(x) factor(x, levels = unique(x, fromLast = TRUE)) ),
  .SDcols = c("start_borough", "end_borough")
][, end_borough := fct_rev(end_borough)] |>
  ggplot(aes(end_borough, start_borough))+
  geom_tile(aes(fill = n)) +
  geom_text(aes(label = percent(n/sum(n), accuracy = 0.01))) +
  scale_fill_gradient(low = "white", 
                      high = "red",
                      labels= comma_format())+
  scale_x_discrete(position = "top") +
  labs(title = "Distribution of Trips by Borough in NYC 2022",
       x = "Trip End", 
       y = "Trip Start", 
       fill = "Number of Trips") +
  theme_classic() +
  theme(plot.title = element_text(face = "bold"),
        axis.ticks = element_blank(),
        axis.line = element_blank(),
        axis.text = element_text(color = "black"),
        axis.title = element_text(face = "italic"))
```

Let's remove list the ids that we don't need.

```{r}
TripsZoneValidDistribution <- TripsZoneDistribution[
  !start_borough %chin% c("Staten Island", "Unknown", "EWR") &
    !end_borough %chin% c("Staten Island", "Unknown", "EWR")
]
```


- `start_service_zone` and `end_service_zone`: 52% of the trips take place at the *Boro Zone*, 26% of trips take place at the *Yellow Zone* and only small fraction goes to the *Airports*.

```{r}
TripsZoneValidDistribution[, .(n = sum(n)),
                           by = c("start_service_zone", "end_service_zone")
][order(n)
][, c("start_service_zone", "end_service_zone") := 
    lapply(.SD, \(x) factor(x, levels = unique(x, fromLast = TRUE)) ),
  .SDcols = c("start_service_zone", "end_service_zone")
][, end_service_zone := fct_rev(end_service_zone)] |>
  ggplot(aes(end_service_zone, start_service_zone))+
  geom_tile(aes(fill = n)) +
  geom_text(aes(label = percent(n/sum(n), accuracy = 0.01))) +
  scale_fill_gradient(low = "white", 
                      high = "red",
                      labels= comma_format())+
  scale_x_discrete(position = "top") +
  labs(title = "Distribution of Trips by Service Zone in NYC 2022",
       x = "Trip End", 
       y = "Trip Start", 
       fill = "Number of Trips") +
  theme_classic() +
  theme(plot.title = element_text(face = "bold"),
        axis.ticks = element_blank(),
        axis.line = element_blank(),
        axis.text = element_text(color = "black"),
        axis.title = element_text(face = "italic"))
```

- `start_zone` and `end_zone`:

```{r}
TripsZoneValidDistribution[, .(end_trips = sum(n)),
                           by =  .(borough = end_borough, 
                                   zone = end_zone)
][TripsZoneValidDistribution[, .(start_trips = sum(n)),
                             by =  .(borough = start_borough, 
                                     zone = start_zone)],
  on = c("borough", "zone"),
  nomatch = 0
][, borough := fct_reorder(borough, -end_trips, .fun = sum, na.rm = TRUE)
][order(-end_trips), 
  .SD[1:6],
  by = "borough"] |>
  ggplot(aes(start_trips, end_trips))+
  geom_point(aes(color = borough),
             size = 3.5)+
  geom_abline()+
  ggrepel::geom_text_repel(aes(label = zone),
                           size = 3)+
  scale_x_continuous(labels = comma_format())+
  scale_y_continuous(labels = comma_format())+
  facet_wrap(~borough, scales = "free")+
  labs(title = "Top 6 Most Important Zones by Borough",
       color = "Borough",
       x = "Number of Trips Starting",
       y = "Number of Trips Ending")+
  theme_light()+
  theme(legend.position = "top",
        title = element_text(face = "bold"))
```
