---
title: "Exploratory Data Analysis"
format: 
  ipynb:
      toc: true
execute:
  message: false
  warning: false
---

## Setting the environment up

1. Loading main packages

```{r}
library(here)
library(data.table)
library(lubridate)
library(ggplot2)
library(scales)
library(forcats)
library(patchwork)
theme_set(theme_light())

source(here("R/02-custom-functions.R"))
source(here("R/03-custom-values.R"))
```

2. Importing zone codes

```{r}
ZoneCodes <- fread(
  here("data/taxi_zone_lookup.csv"),
  select = ZoneCodesColTypes
)
```

3. Importing and decoding training data.

```{r}
DecodedTrips <- fst::read_fst(
  path = here("data/TripDataTrain.fst"),
  as.data.table = TRUE
) |>
  decode_zones(ZoneCodes) |>
  decode_business()

setnames(DecodedTrips, "bcf","back_car_fund")
```

## Exploring variable distribution

The purpose of this section is to:

- Understand the meaning of each variable and compare results with current domain knolege
- Find hidden missing values
- Find usual values

### Categorical variables distribution

- `company`: The majority number of trips are done by *Uber* (HV003) and the rest for *Lyft*.

```{r}
plot_chr_count(DecodedTrips, "company")
```

- `dispatching_base_num`: This column doesn't show much information, so we will **erase** this column as it doesn't show any useful information.

```{r}
plot_chr_count(DecodedTrips, "dispatching_base_num")
```

- `originating_base_num`: This column doesn't show much information, so we will **erase** this column as it doesn't show any useful information.

```{r}
plot_chr_count(DecodedTrips, "originating_base_num")
```

- `shared_request_flag`: Most of passengers don't agree to a shared/pooled ride.

```{r}
plot_chr_count(DecodedTrips, "shared_request_flag")
```

- `shared_match_flag`: Shows that actually fewer trips were shared.

```{r}
plot_chr_count(DecodedTrips, "shared_match_flag")
```

- `access_a_ride_flag`: *Uber* isn't reporting whether their trips were administered on behalf of the Metropolitan 
Transportation Authority and for *Lyft* the answer is always "N", so we will **erase** this column as it doesn't show any useful information.

```{r}
plot_chr_count(DecodedTrips, "access_a_ride_flag")

DecodedTrips[, .N,
              by = c("company",
                     "access_a_ride_flag")]
```

- `wav_request_flag`: It's really unusual for a passager to request a wheelchair-accessible vehicle.

```{r}
plot_chr_count(DecodedTrips, "wav_request_flag")

DecodedTrips[, .N, "wav_request_flag"]
```

- `wav_match_flag`: 7% of trips took place in wheelchair-accessible vehicle which implies that there is more offers than demand.

```{r}
plot_chr_count(DecodedTrips, "wav_match_flag")
```

- For `start_Borough` and `end_Borough` tt's weird to start or end the trips in Stalen Island or the EWR Airport. We will need to **inputate** the Unknown level.

```{r}
ggBorough1 <- plot_chr_count(DecodedTrips, "start_Borough")

ggBorough2 <- plot_chr_count(DecodedTrips, "end_Borough")

ggBorough1 + ggBorough2
```

- For `start_service_zone` and `end_service_zone` It's weird to start or end the trips in any Airports. For consistency we will **relabel EWR as Airpots** and **impute** "N/A" values.

```{r}
ggServiceZone1 <- plot_chr_count(DecodedTrips, "start_service_zone")

ggServiceZone2 <- plot_chr_count(DecodedTrips, "end_service_zone")

ggServiceZone1 + ggServiceZone2
```

At this point is important to explain that in NYC cabs operate different depending on its color:

- **Yellow cabs**: They have no restrictions when it comes to travel.

- **Green cabs**: They can only pick up passengers in Harlem (south of West 110th St and East 96th St), Queens, the Bronx and Brooklyn â€” excluding the airports but **can drop passengers off anywhere** in New York City.

> Uber and Lyft doesn't any restriction at traveling.

![Zone map from NYC Taxi & Limousine Commission (TLC)](assets/01-Green-Yellow-Zones.png)


- `start_Zone` and `end_Zone` represent a diverse number of places as theirs higher proportion of trips is lower then 3% with the exception of the "N/A" value that needs to be **erased and inputed**.

```{r}
ggZone1 <- plot_chr_count(DecodedTrips, "start_Zone")

ggZone2 <- plot_chr_count(DecodedTrips, "end_Zone")

ggZone1 + ggZone2
```


### Numerical variables distribution

Before checking any distribution chart let's the summary statistics of numeric vars.

```{r}
NumericSummary <-
  DecodedTrips[, .SD, .SDcols = is.numeric] |>
  skimr::skim()
  
setDT(NumericSummary) |> print()
```

After checking that statistics we can say that:

1. Numeric values has very different dimensions. So we will need to scale them before applying any method based on distances like PCA.

2. Variables have **very high variability** as of theirs coefficient of variation are higher 0.50, specially for `airport_fee`, `tolls` and `tips`.

```{r}
NumericSummary[, .(variable = skim_variable,
                   CV = numeric.sd/numeric.mean)
  ][, variable := fct_reorder(variable, CV)] |>
  ggplot(aes(CV, variable))+
  geom_col(fill = "forestgreen", alpha = 0.75)+
  labs(title = "Coefficient of variation summary")+
  theme(plot.title = element_text(face = "bold"))
```

3. `trip_miles`, `trip_time`, `base_passenger_fare`, `sales_tax` and `driver_pay` could be 0 of all of them a 0 at the same time, otherwise we need to **erase and input the values**.

4. If `base_passenger_fare` and `driver_pay` are negative them we need to **erase and input the values** the passanger cannot charge the drive.


### Datetime variables distribution

```{r}
DatetimeSummary <-
  DecodedTrips[, .SD, .SDcols = is.POSIXct] |>
  skimr::skim()

setDT(DatetimeSummary) |> print()
```

## MAPPING

```{r}
library(leaflet)

# Define the locations
data <- data.frame(adress = c("JFK Airport, Queens, NY, US",
                              "Briarwood/Jamaica Hills, Queens, NY, US"))


geo2 <- tidygeocoder::geocode(data, address = "adress", method = "arcgis")

# Calculate the distance
dist2 <- osrm::osrmRoute(
  src = geo2[1,c("long","lat")],
  dst = geo2[2,c("long","lat")],
  overview = "full"
)

# Print the distance in miles
print(dist2$distance * 0.621371)

# Create a leaflet map
m <- leaflet() |>
  addTiles() |>
  addPolylines(data = dist2$geometry,
               color = "blue")

MapImg <- here("notebooks/map.png")
MapHtml <- here("notebooks/map.html")

htmlwidgets::saveWidget(m, MapHtml)
webshot::webshot(MapHtml, MapImg, zoom = 10)
```

```{r}
#| include: false
#| eval: true
file.remove(c(MapImg,MapHtml))
```


## References

- Taxi color: https://newyorksimply.com/green-taxis-nyc-cab/
