---
title: 'Defining the project'
format: 
  gfm:
    toc: true

execute:
  message: false
  warning: false
---

## Project Name

**Taxi Drivers Net Earnings**.

## Problem Statement

The problem is that taxi driversâ€™ net earnings are not as high as they could be due to a lack of strategy for increasing tips.

## Project Scope

This project will be limited to Juno, Uber, Via and Lyft taxi drivers who work in New York City.

## Stakeholders

- Taxi drivers
- Taxi companies
- Customers
- NYC Taxi and Limousine Commission

## Top Process Definition

Top define the elements of the process, we use a **SIPOC** diagram.

```{r}
#| eval: false

DiagrammeR::grViz('
digraph SIPOC {
    rankdir=LR;
    node [shape=box];
    subgraph cluster_S {
        label="Suppliers";
        S1 [label="Gas Station"];
        S2 [label="Car Manufacturer"];
        S3 [label="Taxi Application"];
        S4 [label="Telecomuncation\nCompany"];
        S5 [label="Smartphone Supplier"];
        S6 [label="Maintenance\nService Providers"];
    }
    subgraph cluster_I {
        label="Inputs";
        I1 [label="Gas"];
        I2 [label="Car"];
        I3 [label="Start\nLocation"];
        I4 [label="End\nLocation"];
        I5 [label="Internet"];
        I6 [label="Smartphone"];
        I7 [label="Customer\nRequests"];
    }
    subgraph cluster_P {
        label="Process";
        P1 [label="The customer request a taxi"];
        P2 [label="The driver arrived at\nthe pick-up location"];
        P3 [label="Drivers pick the customer up"];
        P4 [label="Drivers drive to destination"];
        P5 [label="Drivers leave the customer\nat the end point"];
    }
    subgraph cluster_O {
        label="Outputs";
        O1 [label="The customer is picked up\n at start location"];
        O2 [label="The customer recives a\ntravel experience"];
        O3 [label="The Customer gets\nat end location"];
        O4 [label="Payment Received"]
    }
    subgraph cluster_C {
        label="Customers";
        C1 [label="Taxi User"];
    }
    S1 -> I1 [style=invis];
    I1 -> P1 [style=invis];
    P1 -> O1 [style=invis];
    O1 -> C1 [style=invis];
    P1 -> P2 [constraint=false];
    P2 -> P3 [constraint=false];
    P3 -> P4 [constraint=false];
    P4 -> P5 [constraint=false];
}

')
```

![](img/01-SIPOC.png)

## Project Objetive

The objective of this project is to develop a strategy to select the best payed trips possible and to increase their tips and thereby their net earnings.

## Data Requirements

In this project will use a subset of the data available in the [TLC Trip Record Data](https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page) from 2022 to 2023 for **High Volume For-Hire Vehicle** with the columns described in the README.md file located at the [data](https://github.com/AngelFelizR/nyc-taxi-project/tree/master/data) folder.

Based on the variables available, we can divide them in to 2 categories:

- **Available Before Arriving at the Pick-Up Location**
  - hvfhs_license_num
  - dispatching_base_num
  - originating_base_num
  - request_datetime
  - PULocationID
  - DOLocationID
  - trip_miles
  - base_passenger_fare
  - shared_request_flag
  - access_a_ride_flag
  - wav_request_flag
  - wav_match_flag

- **Available After Ending the Trip**
  - on_scene_datetime
  - pickup_datetime
  - dropoff_datetime
  - trip_time
  - tolls
  - bcf
  - sales_tax
  - congestion_surcharge
  - airport_fee
  - tips
  - driver_pay
  - shared_match_flag
  

## Defining Metric

Based on the current information we can say that our objective is to increase the **hourly wage** received by each taxi driver defined by the following formula.

$$
\text{Hourly Wage} = \frac{\text{Total Driver Pay} + \text{Total Tips}}{\text{Total Hours Worked}}
$$

### Defining Metric's Base Line

Defining the based line based on this data is a challenge as the data doesn't any unique id to make the estimation, but we can run a simulation to estimate it's value with a confident interval.

Let's start loading the environment to use.

```{r}
# Loading libraries to use
library(here)
library(scales)
library(ggplot2)
library(data.table)
library(lubridate)
library(dplyr)
library(arrow)
source(here("R/01-custom-functions.R"))

# Loading valid zones
ValidZoneCodes <- fread(
  here("data/taxi_zone_lookup.csv"),
  colClasses = c("integer",
                 "character",
                 "character",
                 "character")
)[Borough %chin% c("Manhattan", "Brooklyn", "Queens")]

# Trip Data
NycTrips <- open_dataset(here("data/trip-data"))
```

Then we can define the closest zone to each starting zone.

```{r}
#| eval: false

ClosestZone <-
  NycTrips |>
  group_by(PULocationID, DOLocationID) |>
  summarize(trip_miles_mean = mean(trip_miles)) |>
  collect() |>
  as.data.table() |>
  (\(dt) dt[PULocationID != DOLocationID
  ][order(PULocationID, trip_miles_mean),
    .SD[1L],
    by = "PULocationID"
  ][, setattr(DOLocationID, "names", PULocationID)])()
```

And identify all zones related to each Borough.

```{r}
#| eval: false

BoroughZones <-
  ValidZoneCodes[, .(LocationID,
                     id_list = list(LocationID)),
                 by = "Borough"]
```

The simulation will be based on the following assumptions related to the taxi drivers:

- They can start to work from any zone of Manhattan, Brooklyn or Queens.
- They work from 8 to 12 hour every day.
- They can start to work in any month, weekday or hour.
- They just can take trips starting at the same zone they are after ending the their last trip
- The maximum waiting time before receiving a new trip request is 6 minutes.
- If a taxi driver cannot find a new trip in the first 6 minutes, he can to extend 6 minutes more and drive to the closest zone to find a new trip, but if that doesn't work in the next 6 minutes he can drive to any zone in the current Borough.

```{r}
#| eval: false

# Repeating the experiment to create confident intervals
NumRepetitions <- 30L
MinutesToNextTrip <- minutes(6L)

# Defining the seed
set.seed(1558)

# Defining the starting point of each repetition
RandomStartPoint <- data.table(
  simulation_day = 1:NumRepetitions,
  seed_num = sample(1000:9000, NumRepetitions),
  PULocationID = sample(ValidZoneCodes$LocationID, NumRepetitions, replace = TRUE),
  hours_to_work = sample(8:12, NumRepetitions, replace = TRUE),
  start_time = make_datetime(
    year = 2022L,
    month = sample(1:12, NumRepetitions, replace = TRUE),
    day = sample(1:31, NumRepetitions, replace = TRUE),
    hour = sample(0:23, NumRepetitions, replace = TRUE)
  )
)

# Performing base line simulation
BaseLineSimulation <-
  RandomStartPoint[
    , simulate_trips(NycTrips,
                     current_time = start_time,
                     current_zone = PULocationID,
                     minutes_next_trip = MinutesToNextTrip,
                     waiting_time = start_time + MinutesToNextTrip,
                     end_time = start_time + hours(hours_to_work),
                     valid_zones = ValidZoneCodes$LocationID,
                     closest_zone = ClosestZone,
                     borough_zones = BoroughZones,
                     seed_num = seed_num),
    by = "simulation_day"
  ][RandomStartPoint, on = "simulation_day"]
```

```{r}
#| echo: false
#| eval: false

# Now we can save the results to 
# avoid running this long simulation twice

save(
  ClosestZone,
  BoroughZones,
  NumRepetitions,
  MinutesToNextTrip,
  RandomStartPoint,
  BaseLineSimulation,
  file = here("data/Base-Simulation.RData")
)

```

```{r}
#| echo: false

load(here("data/Base-Simulation.RData"))
```

Once we have the simulation, we can say with 95% confident that the **Hourly Wage Mean** is between 34.34 and 55.29 dollars, with **42.54** as our best approximation.

```{r}
SimulationHourlyWage <-
  BaseLineSimulation[, .(`Hourly Wage` = (sum(s_driver_pay) + sum(s_tips))/mean(hours_to_work)),
                     by = "simulation_day"] 

Interval <- 
  quantile(SimulationHourlyWage$`Hourly Wage`, c(0.025, 0.975)) |>
  round(2)

ggplot(SimulationHourlyWage)+
  geom_histogram(aes(`Hourly Wage`),
                 fill = "blue2",
                 binwidth = 4,
                 alpha = 0.80)+
  geom_vline(xintercept = Interval,
             linewidth = 0.8)+
  annotate(geom = "text",
           y = 7,
           x = c(Interval[1L] - 1.5,
                 Interval[2L] + 1.5),
           label = as.character(Interval))+
  scale_y_continuous(breaks = breaks_width(2, offset = 1))+
  labs(title = "Hourly Wage Distribution",
       subtitle = paste0("Mean: ", round(mean(SimulationHourlyWage$`Hourly Wage`), 2),
                         ", Median: ", round(median(SimulationHourlyWage$`Hourly Wage`), 2)),
       y = "Count")+
  theme_light()+
  theme(panel.grid.minor.y = element_blank(),
        panel.grid.major.y = element_blank(),
        plot.title = element_text(face = "bold"))
```

## Business Case

As the based driver's pay increase with costs like gas, time and car's maintenance the best way to increase total earning is by increasing the amount of **tips** that drivers receive from customers.

Based on *212,416,083* trips recorded 2022, drivers received *$229,936,965* in tips which is only 5% of the total earnings for that year, for example if a driver improve his strategy to increase his tips to **20%** of his current earning he could be earning **`r dollar(42.54*8*5*4*0.2)`** extra monthly if he works 8 hours a day, 5 days each week and earns *$42.54* hourly.

```{r}
# 2022 Earning Summary
NycTrips |>
  filter(year == 2022) |>
  summarize(number_of_trips = sum(driver_pay > -1e6),
            trips_with_tips = sum(tips > 0, na.rm = TRUE),
            driver_net_earning = sum(driver_pay + tips, na.rm = TRUE),
            tips = sum(tips, na.rm = TRUE)) |>
  collect() |>
  as.data.table() |>
  (\(dt)  dt[, .(number_of_trips = comma(number_of_trips),
                 trips_with_tips = comma(trips_with_tips),
                 trips_with_tips_pct = percent(trips_with_tips / number_of_trips),
                 driver_net_earning = dollar(driver_net_earning),
                 tips = dollar(tips),
                 tips_pct = percent(tips/driver_net_earning))
          ][, melt(.SD, 
                   measure.vars = names(.SD),
                   variable.name = "Summary Variable",
                   value.name = "Total",
                   variable.factor = FALSE)]
   )()

```

## Project's side benefits

It's also important to consider that Taxi companies and customers can both benefit from drivers earning more tips in several ways:

1. **Taxi Companies**: 
    - **Employee Satisfaction**: Higher tips can lead to increased job satisfaction among drivers, which can improve their performance and reduce turnover rates.
    - **Company Reputation**: If drivers are earning more tips, it could indicate that they are providing excellent service, which can enhance the company's reputation.
    - **Customer Retention**: Satisfied drivers are more likely to provide better customer service, which can lead to higher customer retention rates.

2. **Customers**:
    - **Better Service**: Drivers who earn more tips are often those who provide better service. This could mean cleaner vehicles, more courteous behavior, and a more enjoyable ride overall.
    - **Driver Availability**: If the tip earnings are high, it could attract more drivers to work, potentially reducing wait times for customers.
    - **Safety**: Drivers who are not worried about their earnings might be less likely to engage in risky behaviors (like speeding or working overly long shifts) to earn more.

## Deliverables

A **Shiny app** which assist the drivers focus their attention to the better trips.
